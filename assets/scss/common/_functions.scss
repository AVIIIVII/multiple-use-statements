@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

// - String - //

// @function stringSplit() -- split a string into a list of strings
//  {string} $string: the string to be split
//  {string} $delimiter: the boundary string
//  @return {list} the result list
@function stringSplit($string, $delimiter) {
  $result: ();
  @if $delimiter == '' {
    @for $i from 1 through string.length($string) {
      $result: list.append($result, string.slice($string, $i, $i));
    }
    @return $result;
  }
  $exploding: true;
  @while $exploding {
    $d-index: string.index($string, $delimiter);
    @if $d-index {
      @if $d-index > 1 {
        $result: list.append($result, string.slice($string, 1, $d-index - 1));
        $string: string.slice($string, $d-index + string.length($delimiter));
      } @else if $d-index == 1 {
        $string: string.slice($string, 1, $d-index + string.length($delimiter));
      } @else {
        $result: list.append($result, $string);
        $exploding: false;
      }
    } @else {
      $result: list.append($result, $string);
      $exploding: false;
    }
  }
  @return $result;
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function stringReplace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      stringReplace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

// - Cast - //

///
/// Embed the result of a SassScript expression into a chunk of CSS.
///
/// @param {Any} $value - Value to be stringified
///
/// @return {String}
///
@function interpolation($sassScriptExpression) {
  @return #{$sassScriptExpression};
}

///
/// Casts a string into a string.
///
/// @param {Any} $value - Value to be stringified
///
/// @return {String}
///
@function toString($value) {
  @return inspect($value);
}

///
/// Casts a string into a number.
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function toNumber($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `toNumber` should be a number or a string.');
  }
  $result: 0;
  $digits: 0;
  $minus: string.slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );
  @for $i from if($minus, 2, 1) through string.length($value) {
    $character: string.slice($value, $i, $i);
    @if not(index(map.keys($numbers), $character) or $character == '.') {
      @return to-length(
        if($minus, -$result, $result),
        string.slice($value, $i)
      );
    }
    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map.get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map.get($numbers, $character) / $digits;
    }
  }
  @return if($minus, -$result, $result);
}

// - Complex - //

@function linearFunction($minScreen, $minValue, $maxScreen, $maxValue) {
  $a: math.div(($maxValue - $minValue), ($maxScreen - $minScreen));
  $b: $minValue - $a * $minScreen;

  $sign: '+';
  @if ($b < 0) {
    $sign: '-';
    $b: math.abs($b);
  }
  @return calc(#{$a * 100}vw #{$sign} #{$b});
}

// - Unit - //

/**
* Remove the unit of a length
* @param {Number} $number - Number to remove unit from
* @return {Number} - Unitless number
*/
@function stripUnit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

@function rem($pixels) {
  @return stripUnit($pixels) * 0.0625rem;
}

// - Color - //

@function extractRgba($rgba) {
  $colorString: string.slice(
    $rgba,
    string.index($rgba, '(') + 1,
    string.index($rgba, ')') - 1
  );
  $colorString: stringReplace($colorString, ' ', '');
  $colorString: stringReplace($colorString, '"', '');
  $colorValuesList: stringSplit($colorString, ',');
  $red: toNumber(list.nth($colorValuesList, 1));
  $green: toNumber(list.nth($colorValuesList, 2));
  $blue: toNumber(list.nth($colorValuesList, 3));
  $alpha: toNumber(list.nth($colorValuesList, 4));

  @return (r: $red, g: $green, b: $blue, a: $alpha);
}
